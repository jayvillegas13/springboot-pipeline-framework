name: Build Pipeline
run-name: Jay's Build Pipeline 
on:
  workflow_dispatch:
    inputs:
      build-push-image:
        type: boolean
        description: Build and Push the Image
  push:
    branches:    
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: 'maven'

    - name: Check Java version
      run: java --version 

    - name: Running Unit Test
      run: echo 'unit testing'

    - name: Running SCA
      run: echo 'sca'

    - name: mvn clean install
      run: mvn clean install

    - name: mvn package
      run: mvn package

    - name: Running linting
      run: echo 'linting'

    - name: Running format check
      run: echo 'format check'

    - name: Security Scanning
      run: echo 'security scanning'

    - name: Export Test Reports
      run: echo 'export test reports'

    - name: Export SCA reports
      run: echo 'export SCA reports'

  terraform-run:
    runs-on: ubuntu-latest
    steps:
    - run: echo 'running terraform linting'
    - run: echo 'running terraform format check'
    - run: echo 'running security scanning'

    - run: echo 'terraform init'
    - run: echo 'terraform validate'

  # Create image and push to container registry
  build-push-image: 
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: paulhatch/semantic-version@v5.3.0
      with:
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
        major_regexp_flags: ""
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
        minor_regexp_flags: ""
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}-SNAPSHOT${increment}"
        # Named version, will be used as suffix for name version tag
        namespace: ${{ github.repository }}
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: true
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        search_commit_body: false
        # Prevents pre-v1.0.0 version from automatically incrementing the major version.
        # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
        enable_prerelease_mode: true
        # If enabled, diagnostic information will be added to the action output.
        debug: false
        # If true, the branch will be used to select the maximum version.
        version_from_branch: true

    - name: Image Version
      id: version
      uses: paulhatch/semantic-version@v5.3.0

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Set outputs
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        file: ./Dockerfile
        push: true
        tags: ghcr.io/${{ github.repository }}-${{steps.version.outputs.version_format}}:${{ steps.vars.outputs.sha_short }}
        cache-from: type=gha
        cache-to: type=gha,mode=max